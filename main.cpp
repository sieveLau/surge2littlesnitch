#include <iostream>
#include <ostream>
#include <regex>

#include "include/curl_easy.h"
#include "include/curl_exception.h"
#include "include/curl_form.h"
#include "include/curl_ios.h"
#include "include/nlohmann/json.hpp"
#include "cidr2range/cidr2range.hpp"

using std::cout;
using std::endl;
using std::ofstream;
using std::ostringstream;

using curl::curl_easy;
using curl::curl_easy_exception;
using curl::curl_ios;
using json = nlohmann::json;

int main(int argc, char **argv) {

    json result;
    result["name"] = "A Little Snitch Rule Group";
    result["description"] = "Little Snitch rule group generated by surge2littlesnitch.";
    result["denied-remote-domains"] = {};
    result["denied-remote-hosts"] = {};
    result["denied-remote-addresses"] = {};

    if (argc < 2) {
        cout << "Usage: surge2ls <source_file_url>" << endl;
        exit(1);
    }

    ostringstream str;
    curl_ios<ostringstream> writer(str);
    curl_easy easy(writer);

    easy.add<CURLOPT_URL>(argv[1]);
    easy.add<CURLOPT_FOLLOWLOCATION>(1L);
    try {
        easy.perform();

    } catch (curl_easy_exception &exception) {
        std::cerr << exception.what() << endl;
        exception.print_traceback();
    }
    std::istringstream in(str.str());
    std::string line;
    const std::regex reg_host(R"(DOMAIN,([0-9\/\.\:a-zA-Z\-]*)(,.*)?)");
    const std::regex reg_domain(R"(DOMAIN-SUFFIX,([0-9\/\.\:a-zA-Z\-]*)(,.*)?)");
    const std::regex reg_ipcidr(R"(IP-CIDR6?,([0-9\/\.\:a-zA-Z\-]*)(,.*)?)");
    std::cmatch match;
    while ((std::getline(in, line))) {
        auto line_cstr = line.c_str();
        if (std::regex_match(line_cstr, match, reg_domain)) {
            result["denied-remote-domains"].emplace_back(match[1]);
        } else if (std::regex_match(line_cstr, match, reg_host)) {
            result["denied-remote-hosts"].emplace_back(match[1]);
        } else if (std::regex_match(line_cstr, match, reg_ipcidr)) {
            result["denied-remote-addresses"].emplace_back(cidr2range(match[1]));
        }
    }
    cout << result.dump(2, ' ') << endl;
    return 0;
}